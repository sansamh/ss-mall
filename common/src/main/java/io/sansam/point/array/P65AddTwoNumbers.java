package io.sansam.point.array;

/**
 * <p>
 * P65AddTwoNumbers
 * </p>
 *
 * @author houcb
 * @since 2020-06-10 17:15
 */

/**
 * 题目
 * 　　写一个函数，求两个整数之和，要求在函数体内不得使用＋、－、×、÷四则运算符号。
 * <p>
 * 思路
 * 　　对数字做运算，除了四则运算外，只剩下位运算了。根据一般情况下的加法步骤，设计如下：
 * <p>
 * 　　1）不考虑进位对每一位相加：1加0，0加1都等于1，而0加0，1加1等于0，所以使用异或^操作；
 * <p>
 * 　　2）计算进位：只有1加1产生进位，所以采用位与&操作，再左移1位；
 * <p>
 * 　　3）将和与进位相加（num1 = sum, num2 = carry），即重复前两步操作。结束判断为进位为0。
 * <p>
 * 测试代码
 * <p>
 * 　　1.正负零
 * <p>
 * <p>
 * <p>
 * <p>
 * 总结几个位运算的用法
 * <p>
 * 下面举的例子中，a=1010 1010
 * <p>
 * 按位与&
 * （1）清零：a&0=0
 * <p>
 * （2）取指定位上的数字，如取得数字a的最后四位：a&0000 1111 = 0000 1010
 * <p>
 * 按位或|
 * （1）对某些位置置为1，如将a的后四位置为1：a|0000 1111 = 1010 1111
 * <p>
 * 异或^
 * （1）将某些位置取反，如将a的后四位取反：a^0000 1111 = 1010 0101
 * <p>
 * （2）与0异或保留原值，如：a^0000 0000 =1010 1010
 * <p>
 * （3）交换两个的变量值：A=A^B; B=A^B; A=A^B; 可以完成A和B的交换。
 * <p>
 * <p>
 * <p>
 * 口诀：
 * <p>
 * 　　清零取数要用与，某位置一可用或
 * <p>
 * 　　若要取反和交换，轻轻松松用异或
 */
public class P65AddTwoNumbers {

    public static int add(int num1, int num2) {
        int sum;
        int carry;

        while (num2 != 0) {
            sum = num1 ^ num2;
            carry = (num1 & num2) << 1;
            num1 = sum;
            num2 = carry;
        }
        return num1;
    }

    public static void main(String[] args) {
        System.out.println(add(5, 17));
    }
}
